#ifndef __COMMON_TOOLS_BASE_VISITOR_HPP__
#define __COMMON_TOOLS_BASE_VISITOR_HPP__

/***************************************************************************/

namespace Tools {

/***************************************************************************/

template< typename... Types >
class Visitor;

/***************************************************************************/

template< typename  T >
class Visitor< T >
	:	public boost::noncopyable
{

/***************************************************************************/
	
public:

/***************************************************************************/
	
	virtual ~Visitor() = default;

	virtual void visit( T const & _visitable ) = 0;

/***************************************************************************/
};

/***************************************************************************/

template< typename T, typename... Types >
class Visitor< T, Types...> 
	:	public Visitor< Types...>
{

/***************************************************************************/

public:
   
/***************************************************************************/

	using BaseClass = Visitor< Types...>;

    using BaseClass::visit;

	virtual void visit( T const & _visitable ) = 0;

/***************************************************************************/

};

/***************************************************************************/

#define DECLARE_VISITOR( Name, ... )				\
	struct Name##Visitor							\
		:	public Tools::Visitor< __VA_ARGS__ >	\
	{};

/***************************************************************************/

}

/***************************************************************************/

#endif // !__COMMON_TOOLS_BASE_VISITOR_HPP__
